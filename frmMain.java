package javacoeditr.ui;

import java.awt.*;
import java.awt.event.*;
import java.lang.*;
import java.util.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.SocketPermission;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.net.*;
import java.rmi.RMISecurityManager;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.logging.Level;
import java.util.logging.Logger;
import javacoeditor.rmi.EditorService;
import javacoeditor.rmi.EditorServiceServer;
import javax.swing.*;

public class frmMain extends javax.swing.JFrame{

    EditorService service;
    public static Registry registry;
    volatile String lastContent = "";
    String currentFileName = "";
    String nick;
    String jdkPath = "C:\\Program Files\\Java\\jdk1.8.0_25\\bin\\";
    String serverAddress = "192.168.43.110";
    //later added code 
    byte codeEnc[];
    String codeDec="";
    String className="";
    String deletedFilePath="";
    InetAddress ipAdd;
    NetworkInterface macAdd;
    ArrayList<String> getClientList;
    frmOnlineUsers onlineUser;
    Thread fileRead;
    KeyAdapter keyLis;
    int invokeAnyChange=0;
    byte mac[]=new byte[96];
    //later added code 
    
    /**
     * Creates new form frmMain
     */
    public frmMain() {
        initComponents();
    }

    public frmMain(String _nick) {
        initComponents();
        nick = _nick;
        this.setTitle("JLAN Code Editor Client Name: " + nick);
        showConnected(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        cmdStartServer = new javax.swing.JButton();		
	cmdNew = new javax.swing.JButton();
        cmdSaveShare = new javax.swing.JButton();
        cmdOpen = new javax.swing.JButton();
        cmdSaveFile = new javax.swing.JButton();
	cmdDeleteFile = new javax.swing.JButton();
        cmdCompile = new javax.swing.JButton();
        txtIP = new javax.swing.JTextField();
	isTyping = new javax.swing.JTextField();
	cmdConnect = new javax.swing.JButton();
	cmdOnlineUsers = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtEditor = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jToolBar1.setRollover(true);

        cmdStartServer.setText("Start Server");
	cmdStartServer.setForeground(new Color(12,156,6));        
	cmdStartServer.setFocusable(false);
        cmdStartServer.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdStartServer.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmdStartServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdStartServerActionPerformed(evt);
            }
        });
        jToolBar1.add(cmdStartServer);
	
	cmdSaveShare.setText("Share");
        cmdSaveShare.setFocusable(false);
        cmdSaveShare.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdSaveShare.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmdSaveShare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveShareActionPerformed(evt);
            }
        });
        jToolBar1.add(cmdSaveShare);
		
	cmdNew.setText("New");
	cmdNew.setFocusable(false);		
	cmdNew.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);		
	cmdNew.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);	
	cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
	jToolBar1.add(cmdNew);

        cmdOpen.setText("Open File");
        cmdOpen.setFocusable(false);
        cmdOpen.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdOpen.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmdOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdOpenActionPerformed(evt);
            }
        });
        jToolBar1.add(cmdOpen);

        cmdSaveFile.setText("Save File");
        cmdSaveFile.setFocusable(false);
        cmdSaveFile.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdSaveFile.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmdSaveFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveFileActionPerformed(evt);
            }
        });
        jToolBar1.add(cmdSaveFile);

	cmdDeleteFile.setText("Delete File");
        cmdDeleteFile.setFocusable(false);
        cmdDeleteFile.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdDeleteFile.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmdDeleteFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteFileActionPerformed(evt);
            }
        });
        jToolBar1.add(cmdDeleteFile);
	
	cmdCompile.setText("Compile");
        cmdCompile.setFocusable(false);
        cmdCompile.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdCompile.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmdCompile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCompileActionPerformed(evt);
            }
        });
        jToolBar1.add(cmdCompile);

 
	try {
        ipAdd = InetAddress.getLocalHost();	
	macAdd=NetworkInterface.getByInetAddress(ipAdd);
	byte b[]=macAdd.getHardwareAddress();
	mac=b;
        txtIP.setText(ipAdd.getHostAddress());
        } catch (UnknownHostException excp) {

        }
	catch (SocketException excp) {

        }       
	txtIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIPActionPerformed(evt);
            }
        });
        jToolBar1.add(txtIP);

        cmdConnect.setText("Connect");
	cmdConnect.setFocusable(false);
        cmdConnect.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdConnect.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmdConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdConnectActionPerformed(evt);
            }
        });
        jToolBar1.add(cmdConnect);

	cmdOnlineUsers.setText("Show Online Clients");
        cmdOnlineUsers.setFocusable(false);
        cmdOnlineUsers.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdOnlineUsers.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmdOnlineUsers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdOnlineUsersActionPerformed(evt);
            }
        });
        jToolBar1.add(cmdOnlineUsers);
	
	isTyping.setVisible(false);
	jToolBar1.add(isTyping);
        
	txtEditor.setText("class Save_File_By_This_Class_Name\n{\n	public static void main(String[] args)\n	{\n\n 	/*Here is your main method start typing your code. Save your file by the class' name or you may change the name.*/\n\n	}\n}\n" );
 	txtEditor.setColumns(20);
        txtEditor.setRows(5);
	jScrollPane1.setViewportView(txtEditor);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 760, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void setClassName(String clsname){
        className=clsname;  
        txtEditor.setText("class "+className+"\n{\n	public static void main(String[] args)\n	{\n\n 	/*Here is your main method start typing your code. Save your file by the class' name or you may change the name.*/\n\n	}\n}\n" );
    }
 
    private void cmdStartServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdStartServerActionPerformed
        if(cmdStartServer.getText().equals("Start Server"))
        {
        try
        {
            //later added code
            if ((ipAdd.getHostAddress()).equals(serverAddress))
            {
                System.out.println(ipAdd.getHostAddress() +" \n"+serverAddress+" \n"+mac);
            }//later added code
            
            txtIP.setText(ipAdd.getHostAddress());
            System.setProperty("java.rmi.server.hostname", ipAdd.getHostAddress()); //serverAddress
            new EditorServiceServer().startServer();
            
        } catch (RemoteException ex)
        {
            System.out.println("Unable to start the server: " + ex.getMessage());
        } catch (Exception ex)
        {
            System.out.println("Unable to start the server: " + ex.getMessage());
        }
        
        cmdConnect.setForeground(new Color(12,156,6));
        cmdStartServer.setText("Stop Server");
        cmdStartServer.setForeground(Color.RED);
        }
        else if(cmdStartServer.getText().equals("Stop Server"))
        {
            try
            {
            System.setProperty("-", "0000"); //serverAddress
            } catch (Exception ex)
            {
                System.out.println("Unable to start the serve: " + ex.getMessage());
            }
        
        cmdConnect.setForeground(Color.BLACK);
        cmdStartServer.setText("Start Server");
        cmdStartServer.setForeground(new Color(12,156,6));
        }
        
    }//GEN-LAST:event_cmdStartServerActionPerformed

    private void cmdSaveShareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveShareActionPerformed
        try
        {
            // TODO add your handling code here:
            //encryption...
            codeEnc=networkEncrypt(txtEditor.getText());//remove if notwork
            //String decheck=networkDecrypt(codeEnc);//remove if not work
            //System.out.println(decheck);//remove if not work
            service.setCurrentFile(txtEditor.getText(), nick,codeEnc);//codeEnc change to txtEditor.getText() and codeEnc
            //encryption...
        } catch (RemoteException ex)
        {
            Logger.getLogger(frmMain.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cmdSaveShareActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
          new frmClassName(this).setVisible(true);
    }
    
    private void txtIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIPActionPerformed

    private void cmdConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdConnectActionPerformed
        // TODO add your handling code here:
        if(cmdConnect.getText().equals("Connect"))
        {
            if (System.getSecurityManager() == null)
            {
            System.setSecurityManager(new RMISecurityManager());
            System.out.println("Done!");
            }

        try
        {
            String ipAddress = txtIP.getText();
            registry = LocateRegistry.getRegistry(ipAddress, 2055);
            service = (EditorService) registry.lookup("EditorService");
            //later added code
            invokeAnyChange=1;
            service.setClientList(nick,invokeAnyChange);
            //later added code
        } catch (Exception ex)
            {
                JOptionPane.showMessageDialog(this, "Unable to connect to the server!\n" + ex.getMessage());
                return;
            }
        JOptionPane.showMessageDialog(this, "Connected!");
        System.out.println(invokeAnyChange+"connected");
        showConnected(true);
        //later added code //you may replace
        //new fileReader().start();
        fileRead=new fileReader();
        System.out.println("fileRead thread Start");
        fileRead.start();
        //later added code //change to above
        keyLis=new MyKeyListen();
        txtEditor.addKeyListener(keyLis);
        isTyping.setVisible(true);
        isTyping.setText(" Find out who is typing...");
        isTyping.setForeground(Color.LIGHT_GRAY);
        cmdConnect.setText("Disconnect");
        cmdConnect.setForeground(Color.RED);
        }
        else if(cmdConnect.getText().equals("Disconnect"))
            {
                try {
                    try{
                    invokeAnyChange=1;
                    service.removeClientFromList(nick,invokeAnyChange);
                    }catch(RemoteException ex)
                    {
                    JOptionPane.showMessageDialog(this, "Unable to remove Client!\n" + ex.getMessage());
                    return;    
                    }
                    registry=null;
                    service = null;
                    } catch (Exception ex)
                        {
                    JOptionPane.showMessageDialog(this, "Unable to connect to the server!\n" + ex.getMessage());
                    return;
                        }
                JOptionPane.showMessageDialog(this, "Disconnected!");
                showConnected(false);
                System.out.println(invokeAnyChange+"disconnected");
                //later added code
                onlineUser=null;//may delete
                fileRead=null;
                System.gc();
                //later added code
                txtEditor.removeKeyListener(keyLis);
                keyLis=null;
                isTyping.setVisible(false);
                cmdConnect.setText("Connect");
                cmdConnect.setForeground(new Color(12,156,6));    
            }
    }//GEN-LAST:event_cmdConnectActionPerformed

    private void cmdOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdOpenActionPerformed
        // TODO add your handling code here:
        new frmOpen(this, "Open").setVisible(true);
    }//GEN-LAST:event_cmdOpenActionPerformed
    
    public void openFile(String fileName) {
        File file = new File(fileName);
        try {
            txtEditor.setText(new String(Files.readAllBytes(Paths.get(fileName))));
            currentFileName = fileName;
            } catch (IOException ex)
            {
            Logger.getLogger(frmMain.class.getName()).log(Level.SEVERE, null, ex);
            }
    }

    private void cmdSaveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveFileActionPerformed
        // TODO add your handling code here:
        new frmOpen(this, "Save").setVisible(true);
    }//GEN-LAST:event_cmdSaveFileActionPerformed

    public void saveFile(String fileName) {
        try {
            File f = new File(fileName);
            if (f.exists())
            {
                f.delete();
            }
                Files.write(Paths.get(fileName), txtEditor.getText().getBytes(), StandardOpenOption.CREATE);
                currentFileName = fileName;
            } catch (IOException ex)
            {
            Logger.getLogger(frmMain.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
     
    private void cmdDeleteFileActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
        new frmOpen(this, "Delete").setVisible(true);
    }
    
    public void deleteFile(String fileName) {
        File f = new File(fileName);
        deletedFilePath=fileName;
        String deleteFile=f.getName().replace(".java", ".class");
        File ff = new File(f.getParent()+"\\"+deleteFile);
        JOptionPane.showOptionDialog(this, f.getAbsolutePath()+"\n"+ff.getAbsolutePath(), "Files Deleted !",JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE,null, null, null);
        f.delete();
        ff.delete();
    }
    
    private void cmdOnlineUsersActionPerformed(java.awt.event.ActionEvent evt) {                                      
        // TODO add your handling code here:
        onlineUser=new frmOnlineUsers(this,service);
        onlineUser.setVisible(true);
    }  
    
    private void cmdCompileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCompileActionPerformed
        // TODO add your handling code here:
        if (currentFileName.equals(""))
        {
            JOptionPane.showMessageDialog(this, "Please save this file before compiling!");
            return;
        }
        //remove the existing file if any
        String outputFile = currentFileName.replace(".java", ".class");
        File f = new File(outputFile);
        if (f.exists())
        {
            f.delete();
        }
        //save all the changes
        saveFile(currentFileName);
        Process process;
        String output = "";
        try {
            process = new ProcessBuilder(
                    jdkPath + "javac", currentFileName).start();
            InputStream is = process.getErrorStream();
            InputStreamReader isr = new InputStreamReader(is);
            BufferedReader br = new BufferedReader(isr);
            String line;
            while ((line = br.readLine()) != null)
            {
                output += line + "\n";
            }
            } catch (IOException ex)
            {
            Logger.getLogger(frmMain.class.getName()).log(Level.SEVERE, null, ex);
            }
        if (Files.exists(Paths.get(outputFile)))
        {
            output = "";
            Object[] options = { "Run" };
            JOptionPane.showOptionDialog(this, "Now! Proceed to Run...", "Code Compilation Successfull !",JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE,null, options, options[0]);
            try
            {
                File file = new File(outputFile);
                process = new ProcessBuilder(jdkPath + "java", "-cp", file.getParent(), file.getName().replace(".class", "")).start();
                InputStream is = process.getInputStream();
                InputStreamReader isr = new InputStreamReader(is);
                BufferedReader br = new BufferedReader(isr);
                String line;
                while ((line = br.readLine()) != null)
                {
                    output += line + "\n";
                }
                    new frmOutput(output).setVisible(true);
            }catch (IOException ex)
            {
                Logger.getLogger(frmMain.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else
        {
            JOptionPane.showMessageDialog(this, output);
        }

    }//GEN-LAST:event_cmdCompileActionPerformed

    void showConnected(boolean connected) {
        cmdSaveShare.setEnabled(connected);
    }
   
    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new frmMain().setVisible(true);
            }
        });
    }

    void confirmUpdate(String updatedText, String user) {
        if (user.equals(nick))
        {
            return;
        }
        if (JOptionPane.showConfirmDialog(this, "File has been updated by " + user + " do you wish to load the changes?") == JOptionPane.OK_OPTION)
        {
            txtEditor.setText(updatedText);
        }
            lastContent = updatedText;
    }

class fileReader extends Thread {
    
/*    public String networkDecrypt(byte[] codeDe)
{
char b[]=new char[codeDe.length];
System.out.println("Decrypting...");
for(int i=0;i<codeDe.length;i++)
{ 
b[i]=(char)codeDe[i];
}
for(int i=0;i<b.length;i++)
{
System.out.print(" "+b[i]);
}
return (new String(b));
}
 */   
    
    
        @Override
    public void run() {
            while (true)
            {
                try
                {
                    byte[] locDe=service.getFileInByte();
                    codeDec=networkDecrypt(locDe);//remove
                    String currentText = codeDec;//codeDec change to service.getCurrentFile();
                    if (currentText == null) {
                        continue;
                    }
                    if (!currentText.equals(lastContent)) {
                        confirmUpdate(currentText, service.getCurrentNickName());//currentText change to service.getCurrentFile()
                    }
                }catch (RemoteException ex)
                {
                    Logger.getLogger(frmMain.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
    }
}


class MyKeyListen extends KeyAdapter
{
@Override
public void keyPressed(KeyEvent e)
{
    try
    {
        isTyping.setSize(250,25); 
        service.setWhoTyping(nick);
        if(service.getWhoTyping().equals(nick))
        {
        isTyping.setText(" You are typing. Go On !!!");
        isTyping.setForeground(Color.ORANGE);
        }
        isTyping.setFont(new Font("Arial",Font.BOLD,11));
        
    }catch(RemoteException ex)
    {
        
    }
}

@Override
public void keyReleased(KeyEvent e)
{
try
    {
        isTyping.setSize(250,25);
        if(service.getWhoTyping().equals(nick))
        {
        isTyping.setText(" You can code now !!!");
        isTyping.setForeground(new Color(12,156,6));
        }
        else
        {
        isTyping.setText(service.getWhoTyping()+" is Typing.... Try after some time !");
        isTyping.setForeground(Color.RED);
        }
        isTyping.setFont(new Font("Arial",Font.BOLD,11));
    }catch(RemoteException ex)
    {
        
    }
}
}



//end to end 
public byte[] networkEncrypt(String codeEn)
{
char b[]=codeEn.toCharArray();
byte j[]=new byte[codeEn.length()];
System.out.println("Encrypting...");
for(int i=0;i<b.length;i++)
{
j[i]=(byte)b[i];
}
for(int i=0;i<b.length;i++)
{
System.out.print(" "+j[i]);
}
return (j);
}

public String networkDecrypt(byte[] codeDe)
{
char b[]=new char[codeDe.length];
System.out.println("Decrypting...");
for(int i=0;i<codeDe.length;i++)
{ 
b[i]=(char)codeDe[i];
}
for(int i=0;i<b.length;i++)
{
System.out.print(" "+b[i]);
}
return (new String(b));
}
//end to end
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdCompile;
    private javax.swing.JButton cmdConnect;
    private javax.swing.JButton cmdOnlineUsers;	
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdOpen;
    private javax.swing.JButton cmdSaveFile;	
    private javax.swing.JButton cmdDeleteFile;
    private javax.swing.JButton cmdSaveShare;
    private javax.swing.JButton cmdStartServer;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTextArea txtEditor;
    private javax.swing.JTextField txtIP;
    private javax.swing.JTextField isTyping;
    // End of variables declaration//GEN-END:variables
}
